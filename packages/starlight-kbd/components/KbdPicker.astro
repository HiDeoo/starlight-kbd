---
import type { ComponentProps } from 'astro/types'
import config from 'virtual:starlight-kbd/config'

import { getTypeLabel } from '../libs/i18n'

import Select from './Select.astro'

// Don't set any initial value - let the client-side script handle it
const value = ''
const options = config.types.map((type) => {
  return {
    label: getTypeLabel(Astro.currentLocale, type),
    selected: false, // No option is selected initially
    value: type.id,
  } satisfies ComponentProps<typeof Select>['options'][number]
})
---

<starlight-kbd-picker {...(config.defaultType ? { 'data-default-type': config.defaultType } : {})}>
  <Select label={Astro.locals.t('starlightKbd.kbdPicker.accessibleLabel')} {options} {value} />
</starlight-kbd-picker>

<script is:inline>
  StarlightKbdProvider.initializeKbdPicker()
</script>

<script>
  customElements.define(
    'starlight-kbd-picker',
    class StarlightKbdSelect extends HTMLElement {
      constructor() {
        super()

        this.querySelector('select')?.addEventListener('change', (event) => {
          if (!(event.currentTarget instanceof HTMLSelectElement)) return

          StarlightKbdProvider.updateKbdPickers(event.currentTarget.value)

          for (const kbd of document.querySelectorAll('[data-sl-kbd-type]')) {
            if (kbd.getAttribute('data-sl-kbd-type') === event.currentTarget.value) {
              kbd.setAttribute('data-sl-kbd-active', '')
            } else {
              kbd.removeAttribute('data-sl-kbd-active')
            }
          }

          if (typeof localStorage !== 'undefined') {
            localStorage.setItem('sl-kbd-type', event.currentTarget.value)
          }
        })
      }
    },
  )
</script>

<style>
  :global(.sl-markdown-content) starlight-kbd-picker {
    display: inline-block;
  }
</style>
