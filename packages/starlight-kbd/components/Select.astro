---
/**
 * https://github.com/withastro/starlight/blob/main/packages/starlight/components/Select.astro
 */

import { Icon } from '@astrojs/starlight/components'

interface Props {
  label: string
  options: {
    label: string
    value: string
    selected: boolean
  }[]
  value: string
}

const { label, options, value } = Astro.props

/**
 * The `autocomplete="off"` attribute is used to prevent the browser from automatically selecting a
 * value for this input, e.g. based on the user's previous selections, as this could lead to
 * incorrect values being selected for example when the user switches between languages and uses
 * the back button.
 * Note that this attribute is only useful when a value is not restored at a later stage, e.g. the
 * bfcache that ignores this attribute when restoring the value.
 */
---

<label class="not-content">
  <span class="sr-only">{label}</span>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="icon label-icon"
    width="16"
    height="16"
    viewBox="0 0 24 24"
    fill="currentColor"
  >
    <path
      d="M6.21 13.29a.93.93 0 0 0-.33-.21 1 1 0 0 0-.76 0 .9.9 0 0 0-.54.54 1 1 0 1 0 1.84 0 1 1 0 0 0-.21-.33ZM13.5 11h1a1 1 0 0 0 0-2h-1a1 1 0 0 0 0 2Zm-4 0h1a1 1 0 0 0 0-2h-1a1 1 0 0 0 0 2Zm-3-2h-1a1 1 0 0 0 0 2h1a1 1 0 0 0 0-2ZM20 5H4a3 3 0 0 0-3 3v8a3 3 0 0 0 3 3h16a3 3 0 0 0 3-3V8a3 3 0 0 0-3-3Zm1 11a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1h16a1 1 0 0 1 1 1Zm-6-3H9a1 1 0 0 0 0 2h6a1 1 0 0 0 0-2Zm3.5-4h-1a1 1 0 0 0 0 2h1a1 1 0 0 0 0-2Zm.71 4.29a1 1 0 0 0-.33-.21 1 1 0 0 0-.76 0 .93.93 0 0 0-.33.21 1 1 0 0 0-.21.33 1 1 0 1 0 1.92.38.84.84 0 0 0-.08-.38 1 1 0 0 0-.21-.33Z"
    >
    </path>
  </svg>
  <select autocomplete="off" value={value}>
    {options.map(({ label, selected, value }) => <option {selected} set:html={label} {value} />)}
  </select>
  <Icon class="icon caret" name="down-caret" />
</label>

<style>
  label {
    --sl-label-icon-size: 1rem;
    --sl-caret-size: 1.25rem;
    --sl-inline-padding: 0.5rem;

    align-items: center;
    color: var(--sl-color-gray-1);
    display: inline-flex;
    gap: 0.25rem;
    position: relative;
  }

  label:hover:not(:where(.sl-markdown-content *)) {
    color: var(--sl-color-gray-2);
  }

  :global(.sl-markdown-content) label:hover {
    color: var(--sl-color-text-accent);
  }

  .icon {
    color: var(--sl-icon-color);
    font-size: var(--sl-icon-size, 1em);
    height: 1em;
    pointer-events: none;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 1em;
  }

  .label-icon {
    font-size: var(--sl-label-icon-size);
    inset-inline-start: 0;
  }

  :global(.sl-markdown-content) .label-icon {
    left: var(--sl-inline-padding);
  }

  .caret {
    font-size: var(--sl-caret-size);
    inset-inline-end: 0;
  }

  :global(.sl-markdown-content) .caret {
    right: var(--sl-inline-padding);
  }

  select {
    appearance: none;
    background-color: transparent;
    border: 0;
    color: inherit;
    cursor: pointer;
    padding-block: 0.25rem;
    padding-inline: calc(var(--sl-label-icon-size) + var(--sl-inline-padding) + 0.25rem)
      calc(var(--sl-caret-size) + var(--sl-inline-padding) + 0.25rem);
    text-overflow: ellipsis;
  }

  :global(.sl-markdown-content) select {
    border: 1px solid var(--sl-color-white);
    border-radius: 999rem;
    outline-offset: 0.1875rem;
  }

  :global(.sl-markdown-content) label:hover select {
    border-color: var(--sl-color-text-accent);
  }

  option {
    background-color: var(--sl-color-bg-nav);
    color: var(--sl-color-gray-1);
  }

  @media (min-width: 50rem) {
    select {
      font-size: var(--sl-text-sm);
    }
  }

  select:not(:where(.sl-markdown-content *)) {
    margin-inline: calc(var(--sl-inline-padding) * -1);
    padding-block: 0.625rem;
  }
</style>
