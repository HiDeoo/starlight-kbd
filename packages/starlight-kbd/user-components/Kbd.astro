---
import config from 'virtual:starlight-kbd/config'

import { getKbdFromString, getKbdLabel } from '../libs/kbd'

export type Props = Record<string, string>

const defaultKbd = Astro.props[config.defaultType]

if (!defaultKbd) {
  // TODO(HiDeoo)
  throw new Error(`No default kbd type found in config`)
}
---

{
  config.types.map((type) => {
    const kbd = getKbdFromString(Astro.props[type.id] ?? defaultKbd)

    const dataAttributes: DOMStringMap = { 'data-sl-kbd-type': type.id }
    if (type.id === config.defaultType) dataAttributes['data-sl-kbd-active'] = ''

    return (
      <span {...dataAttributes}>
        <span class="sr-only">{getKbdLabel(kbd)}</span>
        {kbd.map((chord, chordIndex) => {
          return (
            <Fragment>
              <kbd aria-hidden="true" class="sl-kbd-chord">
                {chord.map((key) => (
                  <kbd>{key}</kbd>
                ))}
              </kbd>
              {chordIndex < kbd.length - 1 && ' '}
            </Fragment>
          )
        })}
      </span>
    )
  })
}

<style>
  span[data-sl-kbd-type]:not([data-sl-kbd-active]) {
    display: none;
  }

  .sl-kbd-chord:has(+ .sl-kbd-chord) {
    margin-inline-end: 0.375rem;
  }

  .sl-kbd-chord kbd {
    background-color: var(--sl-color-gray-6);
    border: 1px solid var(--sl-color-gray-4);
    border-radius: 4px;
    font-family: var(--sl-font-system-mono);
    font-size: var(--sl-text-xs);
    margin-inline: 0.125rem;
    padding: 0.125rem 0.3125rem;
  }
</style>
