---
import config from 'virtual:starlight-kbd/config'

import { parseKbd } from '../libs/kbd'

export type Props = Record<string, string>

const defaultKbd = Astro.props[config.defaultType]

if (!defaultKbd) {
  // TODO(HiDeoo)
  throw new Error(`No default kbd type found in config`)
}
---

{
  config.types.map((type) => {
    const kbd = parseKbd(Astro.props[type.id] ?? defaultKbd)

    const dataAttributes: DOMStringMap = { 'data-sl-kbd-type': type.id }
    if (type.id === config.defaultType) dataAttributes['data-sl-kbd-active'] = ''

    return (
      <span {...dataAttributes}>
        {kbd.map((chord, chordIndex) => {
          // TODO(HiDeoo) chord separator
          // TODO(HiDeoo) chord separator a11y
          return (
            <kbd class="sl-kbd-chord">
              {chord.map((key, keyIndex) => {
                // TODO(HiDeoo) key separator a11y
                return (
                  <>
                    <kbd>{key}</kbd>
                    {keyIndex < chord.length - 1 && ' + '}
                  </>
                )
              })}
              {chordIndex < kbd.length - 1 && ' | '}
            </kbd>
          )
        })}
      </span>
    )
  })
}

<style>
  span:not([data-sl-kbd-active]) {
    display: none;
  }

  .sl-kbd-chord {
    /* // FIXME(HiDeoo)   */
    background-color: red;
    /* // FIXME(HiDeoo)   */
    margin-inline-end: 1rem;
  }
</style>
